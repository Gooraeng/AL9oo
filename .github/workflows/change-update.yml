name: Reinitialize Deployment
run-name: Reinitialize Deployment by ${{ github.actor }}

on:
  workflow_run:
    workflows: [ "Initialize pip and venv" ]
    types:
      - completed
  workflow_dispatch:

env:
  REPO_NAME: ${{ github.event.repository.name }}
  VENV: "venv"

jobs:
  install-venv:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Venv
        uses: fifsky/ssh-action@master
        with:
          command: |
            mkdir -p ${{ env.REPO_NAME }} && cd ${{ env.REPO_NAME }}
            rm -rf ${{env.VENV}}
            python3 -m venv ${{env.VENV}}
            source ${{env.VENV}}/bin/activate
            pip --version
            deactivate
            echo "Venv Setup Done!"
            exit 0
          host: ${{ secrets.VPS_IP }}
          user: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

  deploy-via-sftp:
    needs: [ install-venv ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Deploy to Server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.5
        with:
          username: ${{ secrets.VPS_USER }}
          server: ${{ secrets.VPS_IP }}
          port: ${{secrets.PORT}}
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          # clones entire github repo
          local_path: ./*
          # destination of the code on the server
          remote_path: ./${{ env.REPO_NAME }}
          sftpArgs: '-o ConnectTimeout=5'

  install-requirements:
    needs: [ deploy-via-sftp ]
    runs-on: ubuntu-latest
    steps:
      - name: Install Requirements
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ${{ env.REPO_NAME }}
            source ${{env.VENV}}/bin/activate
            pip install --upgrade pip
            pip install -U -r ./requirements.txt
          host: ${{ secrets.VPS_IP }}
          user: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}

  add-secret-variables:
    needs: [ deploy-via-sftp ]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - id: add-secret-variables
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ${{ env.REPO_NAME }}
            echo "DISCORD_API_TOKEN='${{ secrets.DISCORD_API_TOKEN }}'" > .env
            echo "DISCORD_API_TOKEN_TEST='${{ secrets.DISCORD_API_TOKEN_TEST }}'" >> .env
            echo "REFER_DB='${{ secrets.REFER_DB }}'" >> .env
            echo "REFER_KEY='${{ secrets.REFER_KEY }}'" >> .env
            echo "CARHUNT_DB='${{ secrets.CARHUNT_DB }}'" >> .env
            echo "ELITE_DB='${{ secrets.ELITE_DB }}'" >> .env
            echo "GAUNTLET_DB='${{ secrets.GAUNTLET_DB }}'" >> .env
            echo "WEEKLY_DB='${{ secrets.WEEKLY_DB }}'" >> .env
            echo "CAR_LIST_DB='${{ secrets.CAR_LIST_DB }}'" >> .env
            echo "FEEDBACK_LOG_CHANNEL='${{ secrets.FEEDBACK_LOG_CHANNEL }}'" >> .env
            echo "SUGGESTION_CHANNEL='${{ secrets.SUGGESTION_CHANNEL }}'" >> .env
            echo "ERROR_LOG_WH='${{ secrets.ERROR_LOG_WH }}'" >> .env
            echo "FEEDBACK_WH='${{ secrets.FEEDBACK_WH }}'" >> .env
            echo "LOG_WH='${{ secrets.LOG_WH }}'" >> .env
            echo $?
          host: ${{ secrets.VPS_IP }}
          user: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
  
  create-systemctl-service:
    needs: [add-secret-variables, install-requirements]
    runs-on: ubuntu-latest
    steps:
      - id: creating-systemctl-service
        uses: fifsky/ssh-action@master
        with:
          # Make sure ExecStart=, WorkingDirectory= and chmod +x point to the same directory. These may be unique to your code setup
          command: |
            sudo bash -c 'echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot
            After=multi-user.target
            [Service]
            Type=simple
            ExecStart=$(pwd)/${{env.REPO_NAME}}/${{ env.VENV }}/bin/python3 $(pwd)/${{ env.REPO_NAME }}/launcher.py -normal
            User=${{ secrets.VPS_USER }}
            Restart=on-failure
            RestartSec=30
            WorkingDirectory=$(pwd)/${{ env.REPO_NAME }}/
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/${{ env.REPO_NAME }}.service'
            chmod +x $(pwd)/${{ env.REPO_NAME }}/launcher.py
            sudo systemctl enable ${{ env.REPO_NAME }}.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}.service
          host: ${{ secrets.VPS_IP }}
          user: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
    
  create-systemctl-restart:
    needs: [create-systemctl-service]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-restart-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            sudo bash -c 'echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot restart
            After=multi-user.target
            [Service]
            Type=oneshot
            ExecStart=/usr/bin/systemctl restart ${{ env.REPO_NAME }}.service
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/${{ env.REPO_NAME }}-watcher.service'
            sudo systemctl enable ${{ env.REPO_NAME }}-watcher.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}-watcher.service
          host: ${{ secrets.VPS_IP }}
          user: ${{ secrets.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}