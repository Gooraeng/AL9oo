name: First Deployment
on:
  workflow_dispatch:
env:
  REPO_NAME: ${{ github.event.repository.name }}
  VPS_IP: ${{ secrets.VPS_IP }}
  VPS_USER: ${{ secrets.VPS_USER }}
jobs:
  setup-venv:
    runs-on: ubuntu-latest
    steps:
      - name: Installing venv
        uses: fifsky/ssh-action@master
        with:
          command: |
            rm -rf venv
            python3 -m venv venv
            cd venv
            mkdir ${{ env.REPO_NAME }}
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          args: "-tt"
  
  install-dependencies:
    needs: [deploy-via-sftp]
    runs-on: ubuntu-latest
    steps:
      - name: Installing requirements for ${{ env.REPO_NAME }}
        uses: fifsky/ssh-action@master
        with:
          # install the libraries required for your bot
          # setup venv and then install the requirements
          command: |
            source venv/bin/activate
            pip install --upgrade pip
            pip install -U -r ./venv/${{ env.REPO_NAME }}/requirements.txt
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          args: "-tt"

  deploy-via-sftp:
    needs: [setup-venv]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Deploy to Server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.5
        with:
          username: ${{ env.VPS_USER }}
          server: ${{ env.VPS_IP }}
          port: 22
          ssh_private_key: ${{ secrets.SSH_PRIVATE_KEY }}
          # clones entire github repo
          local_path: ./*
          # destination of the code on the server
          remote_path: ./venv/${{ env.REPO_NAME }}/
          sftpargs: '-o ConnectTimeout=5'
  
  add-secret-variables:
    needs: [ deploy-via-sftp, install-dependencies ]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    steps:
      - id: add-secret-variables
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ./venv/${{ env.REPO_NAME }}
            echo "DISCORD_API_TOKEN=${{ secrets.DISCORD_API_TOKEN }}" > .env
            echo "DISCORD_API_TOKEN_TEST=${{ secrets.DISCORD_API_TOKEN_TEST }}" >> .env
            echo "REFER_DB=${{ secrets.REFER_DB }}" >> .env
            echo "CARHUNT_DB=${{ secrets.CARHUNT_DB }}" >> .env
            echo "CLASH_DB=${{ secrets.CLASH_DB }}" >> .env
            echo "ELITE_DB=${{ secrets.ELITE_DB }}" >> .env
            echo "WEEKLY_DB=${{ secrets.WEEKLY_DB }}" >> .env
            echo "CAR_LIST_DB=${{ secrets.CAR_LIST_DB }}" >> .env
            echo "FEEDBACK_LOG_CHANNEL=${{ secrets.FEEDBACK_LOG_CHANNEL }}" >> .env
            echo "SUGGESTION_CHANNEL=${{ secrets.SUGGESTION_CHANNEL }}" >> .env
            echo "ERROR_LOG_WH=${{ secrets.ERROR_LOG_WH }}" >> .env
            echo "FEEDBACK_WH=${{ secrets.FEEDBACK_WH }}" >> .env
            echo "LOG_WH=${{ secrets.LOG_WH }}" >> .env
            echo $?
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
  
  create-systemctl-service:
    needs: [add-secret-variables, deploy-via-sftp]
    runs-on: ubuntu-latest
    steps:
      - id: creating-systemctl-service
        uses: fifsky/ssh-action@master
        with:
          # Make sure ExecStart=, WorkingDirectory= and chmod +x point to the same directory. These may be unique to your code setup
          command: |
            sudo bash -c 'echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot
            After=multi-user.target
            [Service]
            Type=simple
            ExecStart=$(pwd)/venv/bin/python3 $(pwd)/venv/${{ env.REPO_NAME }}/launcher.py -normal
            User=${{ env.VPS_USER }}
            Restart=on-failure
            RestartSec=30
            WorkingDirectory=$(pwd)/venv/${{ env.REPO_NAME }}/
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/${{ env.REPO_NAME }}.service'
            chmod +x $(pwd)/venv/${{ env.REPO_NAME }}/launcher.py
            sudo systemctl enable ${{ env.REPO_NAME }}.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}.service
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
    
  create-systemctl-restart:
    needs: [create-systemctl-service, add-secret-variables, deploy-via-sftp]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-restart-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            sudo bash -c 'echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot restart
            After=multi-user.target
            [Service]
            Type=oneshot
            ExecStart=/usr/bin/systemctl restart ${{ env.REPO_NAME }}.service
            [Install]
            WantedBy=multi-user.target" > /etc/systemd/system/${{ env.REPO_NAME }}-watcher.service'
            sudo systemctl enable ${{ env.REPO_NAME }}-watcher.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}-watcher.service
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}