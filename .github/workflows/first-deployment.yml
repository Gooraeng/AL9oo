name: First Deployment
on:
  workflow_dispatch:
env:
  REPO_NAME: ${{ github.event.repository.name }}
  VPS_IP: ${{ secrets.VPS_IP }}
  VPS_USER: ${{ secrets.VPS_USER }}
jobs:
  install-dependencies:
    runs-on: ubuntu-latest
    steps:
      - name: Installing requirements for ${{ env.REPO_NAME }}
        uses: fifsky/ssh-action@master
        with:
          # install the libraries required for your bot
          # setup venv and then install the requirements
          command: |
            sudo apt install python3-venv
            python -m venv venv
            source venv/bin/activate
            pip install --upgrade pip
            cd venv/${{ env.REPO_NAME }}
            pip install -U -r requirements.txt
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          args: "-tt"

  deploy-via-sftp:
    needs: [install-dependencies]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      
      - name: Deploy to Server
        uses: wlixcc/SFTP-Deploy-Action@v1.2.5
        with:
          username: ${{ env.VPS_USER }}
          server: ${{ env.VPS_IP }}
          port: 22
          password: ${{ secrets.SSH_PRIVATE_KEY }}
          # clones entire github repo
          local_path: ./*
          # destination of the code on the server
          remote_path: /venv/${{ env.REPO_NAME }}/
          sftpargs: '-o ConnectTimeout=5'
  
  add-secret-variables:
    needs: [ deploy-via-sftp ]
    runs-on: ubuntu-latest
    timeout-minutes: 2
    env:
      # Discord Token
      DISCORD_API_TOKEN: ${{ secrets.DISCORD_API_TOKEN }}
      DISCORD_API_TOKEN_TEST: ${{ secrets.DISCORD_API_TOKEN_TEST }}
      # MongoDB
      REFER_DB: ${{ secrets.REFER_DB }}
      # DBs
      CARHUNT_DB: ${{ secrets.CARHUNT_DB }}
      CLASH_DB: ${{ secrets.CLASH_DB }}
      ELITE_DB: ${{ secrets.ELITE_DB }}
      WEEKLY_DB: ${{ secrets.WEEKLY_DB }}
      CAR_LIST_DB: ${{ secrets.CAR_LIST_DB }}
      # Channels
      FEEDBACK_LOG_CHANNEL: ${{ secrets.FEEDBACK_LOG_CHANNEL }}
      SUGGESTION_CHANNEL: ${{ secrets.SUGGESTION_CHANNEL }}
      # Webhooks
      ERROR_LOG_WH: ${{ secrets.ERROR_LOG_WH }}
      FEEDBACK_WH: ${{ secrets.FEEDBACK_WH }}
      LOG_WH: ${{ secrets.LOG_WH }}

    steps:
      - id: add-secret-variables
        uses: fifsky/ssh-action@master
        with:
          command: |
            cd ${{ env.REPO_NAME }}
            echo ${{ env.DISCORD_API_TOKEN }} > .env
            echo ${{ env.DISCORD_API_TOKEN_TEST }} >> .env
            echo ${{ env.REFER_DB }} >> .env
            echo ${{ env.CARHUNT_DB }} >> .env
            echo ${{ env.CLASH_DB }} >> .env
            echo ${{ env.ELITE_DB }} >> .env
            echo ${{ env.WEEKLY_DB }} >> .env
            echo ${{ env.CAR_LIST_DB }} >> .env
            echo ${{ env.FEEDBACK_LOG_CHANNEL }} >> .env
            echo ${{ env.SUGGESTION_CHANNEL }} >> .env
            echo ${{ env.ERROR_LOG_WH }} >> .env
            echo ${{ env.FEEDBACK_WH }} >> .env
            echo ${{ env.LOG_WH }} >> .env
            echo $?
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
  
  create-systemctl-service:
    needs: [add-secret-variables, deploy-via-sftp]
    runs-on: ubuntu-latest
    steps:
      - id: creating-systemctl-service
        uses: fifsky/ssh-action@master
        with:
          # Make sure ExecStart=, WorkingDirectory= and chmod +x point to the same directory. These may be unique to your code setup
          command: |
            echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot
            After=multi-user.target
            [Service]
            Type=simple
            ExecStart=/usr/bin/python3 /venv/${{ env.REPO_NAME }}/launcher.py
            User=${{ env.VPS_USER }}
            Restart=on-failure
            RestartSec=30
            WorkingDirectory=/venv/${{ env.REPO_NAME }}/
            [Install]
            WantedBy=multi-user.target" >> /etc/systemd/system/${{ env.REPO_NAME }}.service
            chmod +x /venv/${{ env.REPO_NAME }}/launcher.py
            sudo systemctl enable ${{ env.REPO_NAME }}.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}.service
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
    
  create-systemctl-restart:
    needs: [create-systemctl-service, add-secret-variables, deploy-via-sftp]
    runs-on: ubuntu-latest
    steps:
      - id: create-systemctl-restart-service
        uses: fifsky/ssh-action@master
        with:
          command: |
            echo "[Unit]
            Description=${{ env.REPO_NAME }} Discord Bot restart
            After=multi-user.target
            [Service]
            Type=oneshot
            ExecStart=/usr/bin/systemctl restart ${{ env.REPO_NAME }}.service
            [Install]
            WantedBy=multi-user.target" >> /etc/systemd/system/${{ env.REPO_NAME }}-watcher.service
            sudo systemctl enable ${{ env.REPO_NAME }}-watcher.service
            sudo systemctl daemon-reload
            sudo systemctl start ${{ env.REPO_NAME }}-watcher.service
          host: ${{ env.VPS_IP }}
          user: ${{ env.VPS_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}